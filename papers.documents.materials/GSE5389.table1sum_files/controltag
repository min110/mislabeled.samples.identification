
/* Controltag Loader for Macmillan */
(function(){
  var debugging = /kxdebug/.test(location);
  var log = function() {
    // It's a flag, so if it's there, then it means debug.
    debugging && window.console && console.log([].slice.call(arguments).join(' '));
  };

  var load = function(url, callback) {
    log('Loading script from:', url);
    var node = document.createElement('script');
    node.async = true;  // This is just to be friendly.
    node.src = url;

    // Connect to both in case we're in older IE.
    node.onload = node.onreadystatechange = function() {
      var state = node.readyState;
      if (!callback.done && (!state || /loaded|complete/.test(state))) {
        log('Script loaded from:', url);
        callback.done = true;  // Mark the callback, so we don't load it twice on accident.
        callback();
      }
    };

    // Fetch the first script element, so we can insert the
    // controltag before it. There *must* be at least one
    // script element, or this code would never be called
    var sibling = document.getElementsByTagName('script')[0];
    sibling.parentNode.insertBefore(node, sibling);
  };

  // ControlTag simply crashes when opening a website from Twitter browser on
  // iOS, temporarily disable CT when Twitter for iPhone is detected until they
  // fix this (works fine with other twitter client though)
  if (/Twitter for iPhone/.test(window.navigator.userAgent || '')) return;

  var config = {"partner_segment_map": {}, "context_terms": [], "tags": [{"content": "<script type=\"text/javascript\">Krux('social.init');</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "internal": 1, "template_replacement": 1, "execution_results": null, "tier": 1, "library_tag_config": {}, "content_type": "html", "timing": "onload", "method": "document", "type": "library", "id": 69273, "name": "Krux Track Social"}, {"content": "<script>\r\n\r\n(function () {\r\n_ml = window._ml || {};\r\n_ml.pub = '748';\r\n_ml.redirect = '//beacon.krxd.net/usermatch.gif?partner=madisonlogic&partner_uid=[PersonID]';\r\nvar s = document.getElementsByTagName('script')[0], cd = new Date(), mltag = document.createElement('script');\r\nmltag.type = 'text/javascript'; mltag.async = true;\r\nmltag.src = '//ml314.com/tag.aspx?' + cd.getDate() + cd.getMonth() + cd.getFullYear();\r\ns.parentNode.insertBefore(mltag, s);\r\n})();\r\n\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 47642, "name": "Madison Logic provider tag"}, {"content": "<script>\r\n    (function() {\r\n        var kuid = Krux('get', 'user');\r\n        if (kuid) {\r\n            var prefix = location.protocol == 'https:' ? \"https:\" : \"http:\";\r\n            var kurl_params = encodeURIComponent(\"_kuid=\" + kuid + \"&_kdpid=2dd640a6-6ebd-4d4f-af30-af8baa441a0d&dlxid=<na_id>&dlxdata=<na_da>\");\r\n            var kurl = prefix + \"//beacon.krxd.net/data.gif?\" + kurl_params;\r\n            var dlx_url = '//r.nexac.com/e/getdata.xgi?dt=br&pkey=gpwn29rvapq62&ru=' + kurl;\r\n            var i = new Image();\r\n            i.src = dlx_url;\r\n        }\r\n    })();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 1, "timing": "onload", "method": "document", "type": "data provider", "id": 47643, "name": "DataLogix provider tag"}, {"content": "<script>\r\n// this tag is intentionally blank\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 47644, "name": "Technographic Data provider tag"}, {"content": "", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 47645, "name": "Krux Geographic Data provider tag"}, {"content": "<script>\r\n// This tag intentionally empty\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 47646, "name": "Acxiom provider tag"}, {"content": "<script>\r\n\r\n(function() {\r\n    (new Image()).src = \"//apiservices.krxd.net/um?partner=vdna&r=\" + window.location.protocol + \"//e.visualdna.com/conversion&_kdpid=8f95f20d-4acf-43fc-9832-3f5174a166cc\";\r\n})();\r\n\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 47647, "name": "Visual DNA provider tag"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n    Krux('require:http').pixel({\r\n      url: \"//loadm.exelator.com/load\",\r\n      data: {\r\n          _kdpid: 'e4942ff0-4070-4896-a7ef-e6a5a30ce9f9',\r\n          buid: kuid,\r\n          p: '204',\r\n          g: '270',\r\n          j: '0'\r\n      }});\r\n  }\r\n  })();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 47648, "name": "eXelate Media provider tag"}, {"content": "<script>\r\n   \r\n        var md, sec, pmd;\r\n        //Variables to be collected from tbe _metaData variable\r\n        if(window._metaData){\r\n            md = window._metaData;\r\n            // citation author from global variable\r\n            Krux('scrape', {'page_attr_Citation_Author' : {'js_global' : 'md.citation_author'}});\r\n            sec = md['prism.section'] || '';\r\n          \r\n          \r\n          Krux('scrape', {'page_attr_Article_Type' : {'js_global' : 'sec'}}).page_attr_Article_Type ||  Krux('scrape', {'page_attr_Article_Type' : {'javascript' : '_pageMetaData[\"WT.cg_s\"]'}});\r\n          \r\n          \r\n          // keywords from global variable\r\n            Krux('scrape', {'page_attr_Article_Keywords' : {'js_global' : \"_metaData.keywords\"}});\r\n        }       \r\n        //Variables to be collected from the _pageMetaData variable\r\n        if(window._pageMetaData){\r\n            pmd = window._pageMetaData;\r\n            // citation title from global variable\r\n            Krux('scrape', {'page_attr_Citation_Title' : {'js_global' : 'pmd.citation_title'}});\r\n            // citation publication date from global variable\r\n            if(pmd['prism.publicationDate']){\r\n            Krux('set', 'page_attr_Citation_Publication_Date', pmd['prism.publicationDate']);\r\n            }\r\n            // citation doi from global variable\r\n            Krux('scrape', { 'page_attr_Citation_DOI' : {'js_global' : 'pmd.citation_doi'}});\r\n            //Checking for info when user reaches a blocked article\r\n            if(pmd.access && pmd.access === 'No'){\r\n                Krux('scrape', {'user_attr_Access_Denied' : {'js_global' : 'pmd.product_name'}});\r\n                Krux('scrape', {'page_attr_Access_Denied_Article_Type' : {'js_global' : 'sec'}});\r\n            }\r\n        }\r\n\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 0, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 54062, "name": "Nature Articles"}, {"content": "<script>\r\n(function() {\r\n  // Using Meta DCSext.job_id to produce page attribute dcsext_job_id\r\n  Krux('scrape', { 'page_attr_Job_ID': {meta_name: 'DCSext.job_id'}});\r\n// Using Meta DCSext.employer_id to produce page attribute dcsext_employer_id\r\n  Krux('scrape', { 'page_attr_Employer_ID': {meta_name: 'DCSext.employer_id'}});\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 0, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 54064, "name": "Nature Jobs"}, {"content": "<script>\r\n(function(){\r\n    var pageMetaData = window._pageMetaData;\r\n    Krux('scrape', {\r\n            'page_attr_url_path_1' : {'url_path' : '1'},\r\n            'page_attr_url_path_2' : {'url_path' : '2'},\r\n            'page_attr_url_path_3' : {'url_path' : '3'},\r\n            'user_attr_license_type' : {'meta_name' : 'license.subtype'},\r\n            'page_attr_product_name' : {'js_global' : 'window._pageMetaData.product_name'},\r\n            'page_attr_site_id' : {'js_global' : 'window._pageMetaData.site_id'},\r\n            'page_attr_site_id_name' : {'js_global' : 'window._pageMetaData.site_id_name'},\r\n            'user_attr_user_id' : {'js_global' : 'window._pageMetaData.user_id'}\r\n        });\r\n    if(Krux('get','page_attr_site_id') && Krux('get','page_attr_site_id').length > 1){\r\n        Krux('set', 'user_attr_site_account_user', 'true');\r\n    }\r\n    else{\r\n        Krux('set', 'user_attr_site_account_user', 'false');\r\n    }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 0, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 47667, "name": "Nature_DTC"}, {"content": "<script>\r\n(function(){\r\nKrux('scrape', { 'page_attr_keywords': {meta_name: 'keywords'}});\r\nKrux('scrape', { 'page_attr_author': {meta_name: 'author'}});\r\nKrux('scrape', { 'page_attr_WT.cg_n': {js_global: \"dcs.WT.cg_n\"}});\r\nKrux('scrape', { 'page_attr_WT.cg_s': {js_global: \"dcs.WT.cg_s\"}});\r\nKrux('scrape', { 'page_attr_WT.sa_cat': {js_global: \"dcs.WT.sa_cat\"}});\r\nKrux('scrape', { 'page_attr_WT.sa_cattop': {js_global: \"dcs.WT.sa_cattop\"}});\r\nKrux('scrape', { 'user_attr_WT.sa_cstatus_registrant': {js_global: \"dcs.WT.sa_cstatus_registrant\"}});\r\nKrux('scrape', { 'user_attr_WT.sa_cstatus_customer': {js_global: \"dcs.WT.sa_cstatus_customer\"}});\r\nKrux('scrape', { 'user_attr_WT.sa_cstatus_subscriber': {js_global: \"dcs.WT.sa_cstatus_subscriber\"}});\r\nKrux('scrape', { 'page_attr_sciam_url_path_1': {url_path: '1'}});\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 0, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 60077, "name": "SA_Main"}, {"content": "<script>\r\n(function() {\r\n  // Using Globals _metaData.WT.dl to produce user attribute _metaData.WT.dl\r\n  Krux('scrape', { 'user_attr__metaData.WT.registrant_id': {js_global: \"_metaData.WT.registrant_id\"}});\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 52654, "name": "Nature ID scrape"}], "buckets": [], "publisher": {"uuid": "bd339c69-af54-4a21-b4f1-654bcfcd83ca", "id": 12396, "name": "Macmillan"}, "controltag_options": {"async": "true", "render": true}, "site": {"id": 19994, "name": "Nature"}, "realtime_segments": [], "dnt": null, "params": {"connector_host": "connector.krxd.net", "first_party_uid": false, "control_tag_load_sync": "false", "userData_host": "cdn.krxd.net", "disable_http_compression": false, "remove_kxhead": true, "supertag_requires_approval": false, "control_tag_namespace": null, "control_tag_stats_prefix": null, "optimize_realtime_segments": false, "beacon_host": "beacon.krxd.net", "control_tag_pixel_throttle": "100", "store_realtime_segments": false, "user_id_cookie": null, "max_segments": null, "no_pii": 0, "recommend": "false", "revenue_optimization": false, "context_terms": "false", "jslog_host": "jslog.krxd.net", "buckets": "", "site_level_supertag_config": "site", "max_slot_time": 1000, "services_host": "apiservices.krxd.net", "capture_leakage": true, "client_side_storage": "localStorage,cookie", "fingerprint": false, "config_source": 1, "control_tag_version": "stable", "capture_js_errors": "true", "datatag_version": "3", "dfp_premium": "true", "userdata_host": "cdn.krxd.net", "target_fingerprint": false}, "services": {"event": "//beacon.krxd.net/event.gif", "impression": "//beacon.krxd.net/ad_impression.gif", "stats": "//apiservices.krxd.net/stats", "log": "//jslog.krxd.net/jslog.gif", "optout": "//beacon.krxd.net/optout_check", "um": "//apiservices.krxd.net/um", "pixel": "//beacon.krxd.net/pixel.gif", "contentConnector": "//connector.krxd.net/content_connector/", "is_optout": "//beacon.krxd.net/optout_check", "set_optin": "//apiservices.krxd.net/consumer/optin", "social": "//beacon.krxd.net/social.gif", "set_optout": "//apiservices.krxd.net/consumer/optout", "userData": "//cdn.krxd.net/userdata/get", "data": "//beacon.krxd.net/data.gif", "userdata": "//cdn.krxd.net/userdata/get", "addSegment": "//cdn.krxd.net/userdata/add"}, "geo": {}, "segments": [], "confid": "Jn7TaPwq"};

  // Wrap in a function and comment, then toString the func and replace
  // everything that's not the beginning or end of a JSON object, so we get a
  // string that's either empty or JSON.
  var esiGeo = String(function(){/*
    <esi:include src="/geoip_esi"/>
  */}).replace(/^.*\/\*[^{]+|[^}]+\*\/.*$/g, '');

  if (esiGeo) {
    log('Got a request for:', esiGeo, 'adding geo to config.');
    try {
      config.geo = window.JSON.parse(esiGeo);
    } catch (__) {
      // Couldn't parse, so setting to {}
      log('Unable to parse geo from:', config.geo);
      config.geo = {};
    }
  }

  
  
  

  load('//cdn.krxd.net/ctjs/controltag.js.875fd5b280a77e06def8c74a5a268e2c', function() {
    
    
    log('Loading krux configuration.');

    Krux('config', config);

    
  });
})();
